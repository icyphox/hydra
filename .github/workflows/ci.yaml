name: CI Tasks for Ory Hydra
on:
  push:
    branches:
      - master

jobs:
  # test:
  #   name: Run tests and lints
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref_type == 'tag' }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.13
  #     - run: go list -json > go.list
  #     - name: Run nancy
  #       uses: sonatype-nexus-community/nancy-github-action@v1.0.2
  #     - name: Run prettier
  #       uses: ory/ci/prettier@master
  #     - name: Run prettier (docs)
  #       uses: ory/ci/prettier@master
  #       with:
  #         dir: docs
  #     - name: Run golangci-lint
  #       uses: golangci/golangci-lint-action@v2
  #       env:
  #         GOGC: 100
  #       with:
  #         args: --timeout 10m0s --issues-exit-code=0
  #         skip-go-installation: true
  #         skip-pkg-cache: true
  #     - run: | 
  #         make .bin/go-acc
  #         .bin/go-acc -o coverage.out ./... -- -failfast -timeout=20m -tags sqlite
  #     - run: |
  #         bash <(curl -s https://codecov.io/bash)
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # test-hsm:
  #   name: Run HSM tests
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref_type == 'tag' }}
  #   env:
  #     HSM_ENABLED: true
  #     HSM_LIBRARY: /usr/lib/softhsm/libsofthsm2.so
  #     HSM_TOKEN_LABEL: hydra
  #     HSM_PIN: 1234
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.17
  #     - run: |
  #         sudo apt install -y softhsm opensc
  #         sudo rm -rf /var/lib/softhsm/tokens
  #         sudo mkdir -p /var/lib/softhsm/tokens
  #         sudo chmod -R a+rwx /var/lib/softhsm
  #         sudo chmod a+rx /etc/softhsm
  #         sudo chmod a+r /etc/softhsm/*
  #         pkcs11-tool --module /usr/lib/softhsm/libsofthsm2.so --slot 0 --init-token --so-pin 0000 --init-pin --pin 1234 --label hydra
  #         go test -p 1 -v -failfast -short -timeout=20m -tags=sqlite,hsm ./...

  # test-e2e:
  #   name: Run end-to-end tests
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref_type == 'tag' }}
  #   services:
  #     postgres:
  #       image: postgres:9.6
  #       env:
  #         POSTGRES_DB: postgres
  #         POSTGRES_PASSWORD: test
  #         POSTGRES_USER: test
  #       ports:
  #         - 5432:5432
  #     mysql:
  #       image: mysql:8.0
  #       env:
  #         MYSQL_ROOT_PASSWORD: test
  #       ports:
  #         - 3306:3306
  #   env:
  #     TEST_DATABASE_POSTGRESQL: postgres://test:test@localhost:5432/postgres?sslmode=disable
  #     TEST_DATABASE_MYSQL: "mysql://root:test@(localhost:3306)/mysql?multiStatements=true&parseTime=true"
  #     TEST_DATABASE_COCKROACHDB: cockroach://root@localhost:26257/defaultdb?sslmode=disable

  #   steps:
  #     - run: |
  #         docker create --name cockroach -p 26257:26257 \
  #           cockroachdb/cockroach:v20.2.5 start-single-node --insecure
  #         docker start cockroach
  #       name: Start CockroachDB
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-go@v2
  #       with:
  #         go-version: ^1.16

  #     - run: ./test/e2e/circle-ci.bash memory
  #     - run: ./test/e2e/circle-ci.bash memory --jwt
  #     - run: ./test/e2e/circle-ci.bash cockroach
  #     - run: ./test/e2e/circle-ci.bash cockroach --jwt
  #     - run: ./test/e2e/circle-ci.bash mysql
  #     - run: ./test/e2e/circle-ci.bash mysql --jwt
  #     - run: ./test/e2e/circle-ci.bash postgres
  #     - run: ./test/e2e/circle-ci.bash postgres --jwt

  docs-build:
    runs-on: ubuntu-latest
    name: Build and publish docs
      # needs:
      #   - test
    steps:
      - uses: actions/checkout@v2
      - uses: ory/ci/docs@master
        with:
          job: 'cli'
          swag-spec-location: spec/api.json

  # changelog:
  #   name: Generate changelog
  #   needs:
  #     - test
  #     - test-hsm
  #     - test-e2e
  #     - docs

